name: Windows Builds

on: 
  push:
    branches:
      - feature/gha-windows

jobs:
  build:
    name: ${{ matrix.os }}-${{ matrix.build_type }}-${{ matrix.architecture }}-${{ matrix.python_version }}-${{ matrix.generator }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest,]
        build_type: ["Release"]
        architecture: ["x64",]
        python_version: [2.7]
        generator: ["Visual Studio 16 2019", "Ninja"]
        include:
        - os: windows-latest
          architecture: "x64"
          vcpkg_triplet: "x64-windows-static"
          msbuild_platform: "x64"

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Set env variables for subsequent steps (all)
        run: |
          echo "::set-env name=VCPKG_RESPONSE_FILE::external/vcpkg_${{ matrix.vcpkg_triplet }}_response_file.txt"
          echo "::set-env name=PIP_REQUIREMENTS_FILE::external/pip_requirements.txt"

      - name: Install Ninja
        if: startsWith(matrix.generator, 'Ninja')
        run: |
          choco install ninja

      - name: Cache vcpkg C++ dependencies
        id: cache_vcpkg
        uses: actions/cache@v2
        with:
          path: vcpkg/installed
          key: dev2-vcpkg-${{ matrix.vcpkg_triplet }}-${{ hashFiles(format('{0}', env.VCPKG_RESPONSE_FILE)) }}

      - name: Install vcpkg packages (windows)
        if: steps.cache_vcpkg.outputs.cache-hit!='true' && startsWith(matrix.os, 'windows')
        run: |
          ${{ github.workspace }}/vcpkg/bootstrap-vcpkg.bat -disableMetrics
          ${{ github.workspace }}/vcpkg/vcpkg install @${{env.VCPKG_RESPONSE_FILE}}

      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python_version }}
          architecture: ${{ matrix.architecture }}

      - name: Get pip cache dir
        id: get_pip_cache_dir
        run: |
          echo "::set-output name=cachedir::$(pip cache dir)"

      - name: pip cache
        id: cache_pip
        uses: actions/cache@v2
        with:
          path: ${{ steps.get_pip_cache_dir.outputs.cachedir }}
          key: dev2-pip-${{ runner.os }}-${{ matrix.python_version }}-${{ matrix.architecture }}-${{ hashFiles(format('{0}', env.PIP_REQUIREMENTS_FILE)) }}

      - name: Install pip packages
        if: steps:cache_pip.outputs.cache-hit!='true'
        run: |
          python -m pip install --upgrade pip
          pip install -r ${{ env.PIP_REQUIREMENTS_FILE }}

      - name: Configure (windows-x64)
        shell: bash
        run: |
          mkdir build
          cmake \
            -S . \
            -B build \
            -G "${{ matrix.generator }}" \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCMAKE_TOOLCHAIN_FILE=vcpkg/scripts/buildsystems/vcpkg.cmake \
            -DVCPKG_TARGET_TRIPLET=${{ matrix.vcpkg_triplet }} \

      - name: Build
        shell: bash
        run: cmake --build build --config ${{ matrix.build_type }} -j 8

      - name: Print built libraries
        shell: bash
        run: |
          find build -name "*.lib"
          find build -name "*.dll"
          find build -name "*.dylib"
          find build -name "*.a"
          find build -name "*.so"
