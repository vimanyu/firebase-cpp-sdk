name: CMake Build Matrix

# Controls when the action will run. Triggers the workflow on push
on: 
  push:
    branches:
      - gha-build

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config: 
        - {
            name: "Windows x64 VS2019 Release Python 2.7",
            os: windows-latest,
            artifact: "windows_msvc_x64_python2.7z",
            build_type: "Release",
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
            archiver: "7z a",
            generators: "Visual Studio 16 2019",
            python_version: 2.7,
            architecture: "x64",
            triplet: "x64-windows-static"
          }
        - {
            name: "Windows x64 VS2019 Release Python 3.6",
            os: windows-latest,
            artifact: "windows_msvc_x64_python3.7z",
            build_type: "Release",
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
            archiver: "7z a",
            generators: "Visual Studio 16 2019",
            python_version: 3.6,
            architecture: "x64",
            triplet: "x64-windows-static"
          }
        - {
            name: "Windows x86 VS2019 Release Python 2.7",
            os: windows-latest,
            artifact: "windows_msvc_x86_python2.7z",
            build_type: "Release",
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
            archiver: "7z a",
            generators: "Visual Studio 16 2019",
            python_version: 2.7,
            architecture: "x86",
            triplet: "x86-windows-static"
          }
        - {
            name: "Windows x86 VS2019 Release Python 3.6",
            os: windows-latest,
            artifact: "windows_msvc_x86_python3.7z",
            build_type: "Release",
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
            archiver: "7z a",
            generators: "Visual Studio 16 2019",
            python_version: 3.6,
            architecture: "x86",
            triplet: "x86-windows-static"
          }

        - {
            name: "Windows x64 VS2019 Debug Python 2.7",
            os: windows-latest,
            artifact: "windows_msvc_x64_python2.7z",
            build_type: "Debug",
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
            archiver: "7z a",
            generators: "Visual Studio 16 2019",
            python_version: 2.7,
            architecture: "x64",
            triplet: "x64-windows-static"
          }
        - {
            name: "Windows x64 VS2019 Debug Python 3.6",
            os: windows-latest,
            artifact: "windows_msvc_x64_python3.7z",
            build_type: "Debug",
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
            archiver: "7z a",
            generators: "Visual Studio 16 2019",
            python_version: 3.6,
            architecture: "x64",
            triplet: "x64-windows-static"
          }
        - {
            name: "Windows x86 VS2019 Debug Python 2.7",
            os: windows-latest,
            artifact: "windows_msvc_x86_python2.7z",
            build_type: "Debug",
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
            archiver: "7z a",
            generators: "Visual Studio 16 2019",
            python_version: 2.7,
            architecture: "x86",
            triplet: "x86-windows-static"
          }
        - {
            name: "Windows x86 VS2019 Debug Python 3.6",
            os: windows-latest,
            artifact: "windows_msvc_x86_python3.7z",
            build_type: "Debug",
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
            archiver: "7z a",
            generators: "Visual Studio 16 2019",
            python_version: 3.6,
            architecture: "x86",
            triplet: "x86-windows-static"
          }
        - {
            name: "Ubuntu x64 g++ Release Python 2.7",
            os: ubuntu-latest,
            artifact: "ubuntu_gcc_x64_python2.7z",
            build_type: "Release",
            archiver: "7z a",
            generators: "Unix Makefiles",
            python_version: 2.7,
            architecture: "x64",
            triplet: "x64-linux"
          }

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: true


      - name: Print env
        run: |
          echo github.event.action: ${{ github.event.action }}
          echo github.event_name: ${{ github.event_name }}

      
      - name: Install vcpkg packages (windows)
        if: contains( ${{ matrix.config.os }}, 'windows') && steps.cache-vcpkg.outputs.cache-hit != 'true'
        run: |
          ${{ github.workspace }}/vcpkg/bootstrap-vcpkg.bat -disableMetrics
          ${{ github.workspace }}/vcpkg/vcpkg install @external/vcpkg_${{ matrix.config.triplet }}_response_file.txt
          # cmd "${{ matrix.config.environment_script }}"

      - name: Install vcpkg packages (linux)
        if: contains( ${{ matrix.config.os }}, 'ubuntu') && steps.cache-vcpkg.outputs.cache-hit != 'true'
        run: |
          ${{ github.workspace }}/vcpkg/bootstrap-vcpkg.sh -disableMetrics
          ${{ github.workspace }}/vcpkg/vcpkg install @external/vcpkg_${{ matrix.config.triplet }}_response_file.txt

      - name: Setup python and install pip packages
        if: steps.cache-pip.outputs.cache-hit != 'true'
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.config.python_version }}
          architecture: ${{ matrix.config.architecture }}
      - run: |
          python -m pip install --upgrade pip
          pip install -r external/pip_requirements.txt

      - name: Alter the path to avoid using rtool's tar before cache posting
        if: contains( ${{ matrix.config.os }}, 'windows')
        run: echo "::add-path::C:/Program Files/Git/usr/bin"

      - name: Configure
        shell: bash
        run: |
          mkdir build
          cmake \
            -S . \
            -B build \
            -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} \
            -G "${{ matrix.config.generators }}" \
            -DCMAKE_TOOLCHAIN_FILE=vcpkg/scripts/buildsystems/vcpkg.cmake \
            -DVCPKG_TARGET_TRIPLET=${{ matrix.config.triplet }} \
            -DFIREBASE_INCLUDE_FIRESTORE=OFF \
            -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }}

      - name: Build
        shell: bash
        run: cmake --build build --config ${{ matrix.config.build_type }} -j 8

      - name: Print built libraries
        shell: bash
        run: |
          find build -name "*.lib"
          find build -name "*.dll"
          find build -name "*.a"
          find build -name "*.so"
